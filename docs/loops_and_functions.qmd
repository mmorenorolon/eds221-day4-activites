---
title: "loops_and_functions"
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)

library(tidyverse)
```

```{r}
#Task 1

weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursay", "Friday", "Saturday",
              "Sunday")

transects <- c("Transect A", "Transect B", "Transect C")

out_matrix <- matrix(nrow = length(weekdays), ncol = length(transects))

for (i in seq_along(weekdays)) {
  for (j in seq_along(transects)){
    m <- paste0(weekdays[i], "-", transects[j])
    out_matrix[i,j] <- m
  }
}
print(out_matrix)
```

```{r}
#Task 2
force <- function(m, a){
  W <- m * a
  print(paste0("The resulting force is ", W , " Newtons."))
}

force(m = 50, a = 8.9)
```

```{r}
#Task 3
fish_parms <- data.frame(sci_name = c("Chanos chanos", "Sphyraena barracuda", "Caranx ignobilis"), 
                         common_name = c("Milkfish", "Great barracuda", "Giant trevally"),
                         a_est = c(0.0905, 0.0181, 0.0353),
                         b_est = c(2.52, 3.27, 3.05))
View(fish_parms)

#W = a * L^b
# function
fish_weight <- function(fish_name, tot_length) {
  
  # Filter the data frame for the matching common name
  fish_row <- fish_parms[fish_parms$common_name == fish_name, ]
  
  # Check if the fish was found
  if (nrow(fish_row) == 0) {
    stop("Fish name not found. Please check your spelling.")
  }
  
  # Extract a and b estimates
  a <- fish_row$a_est
  b <- fish_row$b_est
  
  # Calculate weight in grams
  weight <- a * (tot_length ^ b) 
  
  #return weight value
  return(round(weight, 2))
}

fish_weight("Milkfish", 50)
fish_weight("Great barracuda", 80)
fish_weight("Giant trevally", 100)
```

```{r}
#Task 3 pt 2
milkfish_lengths <- seq(from = 0, to = 100, by = 1)

milkfish_weights <- fish_weight("Milkfish", milkfish_lengths)
print(milkfish_weights)

```

```{r}
#Task 4
wave_power <- function(wave_height, wave_period) {
  
  #calculate wave power
  potential_power <- 0.5 * (wave_height)^2 * wave_period
  return(potential_power)
}

#range of wave heights from 0 to 3 meters by increments of 0.2 meters
wave_heights <- seq(from = 0, to = 3, by = 0.2)

wave_powers <- wave_power(wave_height = wave_heights, wave_period = 8)

# Print the result
print(wave_powers)
```
```{r}
#Task 5
brenville_wave_power <- function(water_depth, wave_height, wave_period) {
  
  if (water_depth > 12) {
    # Deep water equation
    message("Using deep water wave power equation.")
    potential_power <- 0.5 * (wave_height)^2 * wave_period
  } else {
    # Shallow water equation
    message("Using shallow water wave power equation.")
    potential_power <- 0.81 * (wave_height)^2 * wave_period  # Adjusted coefficient for shallow conditions
  }
  
  return(potential_power)
}


brenville_wave_power(water_depth = 15, wave_height = 2, wave_period = 8)

brenville_wave_power(water_depth = 10, wave_height = 2, wave_period = 8)
```

